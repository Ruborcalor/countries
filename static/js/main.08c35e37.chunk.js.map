{"version":3,"sources":["SimpleAppBar.jsx","CountryCard.jsx","CountryCardGrid.jsx","CountryDashboard.jsx","CountryView.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textAlign","SimpleAppBar","props","classes","className","AppBar","position","Toolbar","Typography","variant","FormGroup","FormControlLabel","control","Switch","checked","darkMode","onChange","toggleTheme","label","CountryCard","countryObject","Card","CardActionArea","onClick","setSelectedCountry","alt","src","flag","style","objectFit","height","width","CardContent","component","fontWeight","name","population","region","CardActions","Button","size","color","CountryCardGrid","countryData","Grid","container","map","index","item","sm","xs","length","onEnter","loadMoreCountries","allRegions","CountryDashboard","React","useState","search","setSearch","reduce","obj","regions","setRegions","filteredCountries","setFilteredCountries","slice","displayedCountries","setDisplayedCountries","noCountries","setNoCountries","useEffect","Math","min","updateFilteredCountries","searchQuery","regionsObject","toLowerCase","validRegions","Object","keys","filter","newFilteredCountries","includes","handleRegionChange","event","target","margin","id","marginBottom","TextField","value","InputProps","startAdornment","InputAdornment","row","Checkbox","CircularProgress","CountryView","selectedCountry","IconButton","backToDash","alpha2Code","alpha3Code","area","borders","join","capital","currencies","currencyObject","languages","languageObject","subregion","timezones","App","setCountryData","setDarkMode","createMuiTheme","palette","type","axios","get","then","res","data","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08c35e37.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport Switch from '@material-ui/core/Switch';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: \"left\"\n  },\n}));\n\nconst SimpleAppBar = (props) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Cole Killian Countries\n          </Typography>\n          <FormGroup>\n          <FormControlLabel\n            control={<Switch checked={props.darkMode} onChange={props.toggleTheme} />}\n            label=\"Dark Mode\"\n          />\n          </FormGroup>\n          {/* <Typography variant=\"h6\"> */}\n          {/*   Cole Killian */}\n          {/* </Typography> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default SimpleAppBar;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst CountryCard = (props) => {\n  const { countryObject } = props;\n\n  return (\n    <Card>\n      <CardActionArea onClick={() => props.setSelectedCountry(countryObject)}>\n        {/* display the country's flag */}\n        <img\n          alt=\"Flag\"\n          src={countryObject.flag}\n          style={{ objectFit: \"cover\", height: 200, width: \"100%\" }}\n        />\n        <CardContent>\n          {/* display the country's name */}\n          <Typography\n            variant=\"h6\"\n            component=\"h3\"\n            style={{ fontWeight: \"bold\", textAlign: \"left\" }}\n          >\n            {countryObject.name}\n          </Typography>\n          {/* display the country's population and region */}\n          <Typography\n            variant=\"body1\"\n            component=\"h4\"\n            style={{ textAlign: \"left\" }}\n          >\n            Population: {countryObject.population}\n            <br />\n            Region: {countryObject.region}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        {/* show a learn more button for learning more about the country */}\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          onClick={() => props.setSelectedCountry(countryObject)}\n        >\n          Learn More\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default CountryCard;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Waypoint } from \"react-waypoint\";\n\nimport CountryCard from \"./CountryCard\";\n\nconst CountryCardGrid = (props) => {\n  const { countryData } = props;\n\n  return (\n    <div>\n      <Grid container spacing={5}>\n        {countryData.map((countryObject, index) => (\n          <Grid key={countryObject.name} item sm={4} xs={12}>\n            <CountryCard\n              countryObject={countryObject}\n              setSelectedCountry={props.setSelectedCountry}\n            />\n            {/* insert a waypoint two rows from the bottom of the page that triggers more countries to load */}\n            {index === countryData.length - 3 * 2 && (\n              <Waypoint onEnter={() => props.loadMoreCountries()} />\n            )}\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default CountryCardGrid;\n","import React, { useEffect } from \"react\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport CountryCardGrid from \"./CountryCardGrid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst allRegions = [\"Asia\", \"Europe\", \"Africa\", \"Oceania\", \"Americas\", \"Polar\"];\nconst lazyLoadSpeed = 3 * 3;\n\nconst CountryDashboard = (props) => {\n  // stores the search query\n  const [search, setSearch] = React.useState(\"\");\n\n  // stores the regions to filter by\n  const [regions, setRegions] = React.useState(\n    allRegions.reduce((obj, region) => {\n      obj[region] = false;\n      return obj;\n    }, {})\n  );\n\n  // stores the list of countries after filtering\n  const [filteredCountries, setFilteredCountries] = React.useState(\n    props.countryData\n  );\n\n  // stores the list of countries to be displayed\n  // they are pulled from the filteredCountries with lazy loading\n  const [displayedCountries, setDisplayedCountries] = React.useState(\n    props?.countryData?.slice(0, lazyLoadSpeed)\n  );\n\n  // indicates whether or not there are any countries\n  // left to display after filtering\n  const [noCountries, setNoCountries] = React.useState(false);\n\n  // update filtered countries whenever country data changes\n  useEffect(() => {\n    setFilteredCountries(props.countryData);\n  }, [props.countryData]);\n\n  // update displayed countries whenver filteredCountries changes\n  useEffect(() => {\n    if (filteredCountries) {\n      setDisplayedCountries(\n        filteredCountries.slice(\n          0,\n          Math.min(lazyLoadSpeed, filteredCountries.length)\n        )\n      );\n    }\n  }, [filteredCountries]);\n\n  // function for loading more countries to display\n  // from filteredCountries\n  const loadMoreCountries = () => {\n    // add lazyLoadSpeed more displayed countries\n    setDisplayedCountries([\n      ...displayedCountries,\n      ...filteredCountries.slice(\n        displayedCountries.length,\n        displayedCountries.length + lazyLoadSpeed\n      ),\n    ]);\n  };\n\n  // function for updating the filteredCountries\n  // based on the search query / region filter\n  const updateFilteredCountries = (searchQuery, regionsObject) => {\n    searchQuery = searchQuery.toLowerCase();\n    const validRegions = Object.keys(regionsObject).filter(\n      (region) => regionsObject[region]\n    );\n\n    let newFilteredCountries = [];\n\n    if (searchQuery !== \"\" && validRegions.length !== 0 && props.countryData) {\n      // if both search query and valid regions are non trivial,\n      // filter by both of them\n      newFilteredCountries = props.countryData.filter(\n        (countryObject) =>\n          countryObject.name.toLowerCase().includes(searchQuery) &&\n          validRegions.includes(countryObject.region)\n      );\n    } else if (searchQuery !== \"\" && props.countryData) {\n      // if only the search query is non trivial, only filter by search query\n      newFilteredCountries = props.countryData.filter((countryObject) =>\n        countryObject.name.toLowerCase().includes(searchQuery)\n      );\n    } else if (validRegions.length !== 0 && props.countryData) {\n      // if only the region filter is non trivial, only filter by the region filter\n      newFilteredCountries = props.countryData.filter((countryObject) =>\n        validRegions.includes(countryObject.region)\n      );\n    } else {\n      // if both the search query and region filter are trivial, don't filter\n      newFilteredCountries = props.countryData;\n    }\n    // update whether or not there are any countries left after filtering\n    setNoCountries(newFilteredCountries.length === 0);\n    // update the filteredCountries\n    setFilteredCountries(newFilteredCountries);\n  };\n\n  // handle a change of the search query text input\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value);\n    updateFilteredCountries(event.target.value, regions);\n  };\n\n  // handle a change of the region filter checkboxes\n  const handleRegionChange = (event) => {\n    setRegions({ ...regions, [event.target.name]: event.target.checked });\n    updateFilteredCountries(search, {\n      ...regions,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  return (\n    <div style={{ width: \"80%\", margin: \"80px auto 0 auto\" }}>\n      <div\n        id=\"filterPanel\"\n        style={{\n          marginBottom: 30,\n        }}\n      >\n        {/* display the text field for search queries */}\n        <TextField\n          label=\"Search for a country...\"\n          variant=\"outlined\"\n          value={search}\n          onChange={handleSearchChange}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment>\n                <SearchIcon />\n                &nbsp;\n              </InputAdornment>\n            ),\n          }}\n          style={{\n            width: \"100%\",\n          }}\n        />\n        {/* display the checkboxes for the region filter */}\n        <FormGroup row>\n          {allRegions.map((region, index) => (\n            <FormControlLabel\n              key={index}\n              control={\n                <Checkbox\n                  checked={regions[region]}\n                  onChange={handleRegionChange}\n                  name={region}\n                />\n              }\n              label={region}\n            />\n          ))}\n        </FormGroup>\n        {/* display the number of matching countries indicator */}\n        <Typography variant=\"body1\" style={{ textAlign: \"left\" }}>\n          {filteredCountries ? filteredCountries.length : 0} Matches\n        </Typography>\n      </div>\n      {noCountries ? (\n        /* if no countries are left after the filter, let the user know */\n        <p>No countries left</p>\n      ) : displayedCountries ? (\n        /* if there are countries to display, display them in a card grid */\n        <CountryCardGrid\n          countryData={displayedCountries}\n          setSelectedCountry={props.setSelectedCountry}\n          loadMoreCountries={loadMoreCountries}\n        />\n      ) : (\n        /* if there aren't any countries to display yet, show a circular loader */\n        <CircularProgress />\n      )}\n    </div>\n  );\n};\n\nexport default CountryDashboard;\n","import React from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst CountryView = (props) => {\n\n  // get the countryObject from props\n  const countryObject = props.selectedCountry;\n\n  return (\n    <div style={{ width: \"80%\", margin: \"40px auto 0 auto\" }}>\n      {/* display a back arrow for returning to the dashboard */}\n      <div style={{ textAlign: \"left\", marginBottom: 40 }}>\n        <IconButton onClick={props.backToDash}>\n          <ArrowBackIcon />\n        </IconButton>\n      </div>\n      <Grid container spacing={5}>\n        <Grid item sm={6} xs={12}>\n          {/* display the country's name followed by information about it */}\n          <Typography component=\"h4\" variant=\"h4\" style={{ textAlign: \"left\", fontWeight: \"bold\" }}>\n            {countryObject.name}\n          </Typography>\n          <Typography\n            component=\"h5\"\n            variant=\"body1\"\n            style={{ textAlign: \"left\" }}\n          >\n            <ul>\n              <li>Alpha 2 Code: {countryObject.alpha2Code}</li>\n              <li>Alpha 3 Code: {countryObject.alpha3Code}</li>\n              <li>Area: {countryObject.area}</li>\n              <li>Borders: {countryObject.borders.join(\", \")}</li>\n              <li>Capital: {countryObject.capital}</li>\n              <li>\n                Currencies:{\" \"}\n                {countryObject.currencies\n                  .map((currencyObject, index) => currencyObject.name)\n                  .join(\", \")}\n              </li>\n              <li>\n                Languages:{\" \"}\n                {countryObject.languages\n                  .map((languageObject, index) => languageObject.name)\n                  .join(\", \")}\n              </li>\n              <li>Population: {countryObject.population}</li>\n              <li>Region: {countryObject.region}</li>\n              <li>Subregion: {countryObject.subregion}</li>\n              <li>Timezone: {countryObject.timezones}</li>\n            </ul>\n          </Typography>\n        </Grid>\n        <Grid item sm={6} xs={12}>\n          {/* show the country's flag */}\n          <img\n            src={countryObject.flag}\n            alt=\"Country Flag Image\"\n            style={{ height: \"100%\", width: \"100%\", objectFit: \"cover\" }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default CountryView;\n","import \"./App.css\";\nimport axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport SimpleAppBar from \"./SimpleAppBar\";\nimport CountryDashboard from \"./CountryDashboard\";\nimport CountryView from \"./CountryView\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nfunction App() {\n  // stores data on all the countries pulled from rest api\n  const [countryData, setCountryData] = React.useState();\n  // stores data on the country that the user is learning more about\n  const [selectedCountry, setSelectedCountry] = React.useState();\n  // boolean representing whether or not the site is in dark mode\n  const [darkMode, setDarkMode] = React.useState(false);\n\n  // create theme to be dark or light based on darkmode\n  const theme = createMuiTheme({\n    palette: {\n      type: darkMode ? \"dark\" : \"light\",\n    },\n  });\n\n  // toggles the theme\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n\n  // on first load, pull data from the restcountries api\n  useEffect(() => {\n    axios.get(`https://restcountries.eu/rest/v2/all`).then((res) => {\n      setCountryData(res.data);\n    });\n  }, []);\n\n  return (\n    // wrap the app with ThemeProvider\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        {/* display the simple app bar at the top of the page */}\n        <SimpleAppBar darkMode={darkMode} toggleTheme={toggleTheme} />\n        {selectedCountry ? (\n          /* if a country is selected, display the country view for that country */\n          <CountryView\n            selectedCountry={selectedCountry}\n            backToDash={() => setSelectedCountry()}\n          />\n        ) : (\n          /* if no country is selected, show the country dashboard */\n          <CountryDashboard\n            countryData={countryData}\n            setSelectedCountry={setSelectedCountry}\n          />\n        )}\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}